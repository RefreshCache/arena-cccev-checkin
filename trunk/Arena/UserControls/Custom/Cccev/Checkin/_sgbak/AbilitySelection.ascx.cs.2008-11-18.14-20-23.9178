/**********************************************************************
* Description:	TYPE THE DESCRIPTION OF YOUR MODULE HERE
* Created By:	Nick Airdo @ Central Christian Church of the East Valley
* Date Created:	7/15/2008 7:20:46 PM
*
* $Workfile: AbilitySelection.ascx.cs $
* $Revision: 2 $ 
* $Header: /trunk/Arena/UserControls/Custom/Cccev/Checkin/AbilitySelection.ascx.cs   2   2008-11-17 12:44:53-07:00   JasonO $
* 
* $Log $
**********************************************************************/
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using Arena.Core;
using Arena.Portal;
using Arena.Portal.UI;
using Arena.Security;
using Arena.Custom.Cccev.CheckIn;
using Arena.Custom.Cccev.CheckIn.Entity;

namespace ArenaWeb.UserControls.Custom.Cccev.Checkin
{
	/// <summary>
	/// For each person in the Constants.SESS_LIST_CHECKIN_FAMILYMEMBERS session, displays
	/// a list of abilities for selection.  If the person's ability is already set at the highest
	/// level, it skips that person.
	/// </summary>
	public partial class AbilitySelection : PortalControl
	{

		#region Module Settings
		string _selectServicePageID = string.Empty;

		[ListFromSqlSetting( "Ability Level Lookup Type", "The lookup type of the ability levels", true,
		"", "select lookup_type_id, lookup_type_name from core_lookup_type order by lookup_type_name" )]
		public int AbilityLevelLookupTypeIDSetting { get { return Convert.ToInt32( Setting( "AbilityLevelLookupTypeID", "", true ) ); } }

		[ListFromSqlSetting( "Ability Level Person Attribute", "The ability level person attribute", true,
		"", "select attribute_id, attribute_name from core_attribute where attribute_type = 3 order by attribute_name" )]
		public int AbilityLevelAttributeIDSetting { get { return Convert.ToInt32( Setting( "AbilityLevelAttributeID", "", true ) ); } }

		[SmartPageSetting( "Select Service Page", "The page to select which service to attend.", "UserControls/Custom/Cccev/Checkin/SelectService.ascx", RelatedModuleLocation.Beside )]
		public string SelectServicePageIDSetting
		{
			get { return _selectServicePageID; }
			set { _selectServicePageID = value; }
		}

		#endregion

		int personIndex = 0;

		protected void Page_Load( object sender, EventArgs e )
		{
			if ( !IsPostBack )
			{
				Session[ "personIndex" ] = personIndex;
				ProcessChild( personIndex );
			}
		}

		protected void ProcessChild( int personIndex )
		{
			LookupCollection abilityLookups = new LookupCollection( AbilityLevelLookupTypeIDSetting );
			int maxAbilityLookupID = abilityLookups[ abilityLookups.Count - 1 ].LookupID;

			List<FamilyMember> children = (List < FamilyMember >) Session[ Constants.SESS_LIST_CHECKIN_FAMILYMEMBERS ];

			for ( int i = personIndex; i < children.Count; i++ )
			{
				Session[ "personIndex" ] = i;
				PersonAttribute personAttribute = new PersonAttribute( children[i].PersonID, AbilityLevelAttributeIDSetting );
				if ( personAttribute.IntValue != maxAbilityLookupID )
				{
					BuildAbilitySelector( children[ i ], personAttribute.IntValue, abilityLookups );
					return;
				}
			}

			// when there are no other people to process, move to the next page
			NextPage();
		}

		/// <summary>
		/// Bind a data list of ability levels to select from
		/// </summary>
		/// <param name="child"></param>
		private void BuildAbilitySelector( FamilyMember child, int personAbilityAttributeID, LookupCollection abilities)
		{
			lblPersonName.Text = child.FullName;
			dgAbilities.DataSource = abilities;
			dgAbilities.DataBind();
		}

		private void NextPage()
		{
			Response.Redirect( "default.aspx?page=" + SelectServicePageIDSetting );
		}


		#region Event Handlers

		protected void dgAbilities_SelectedIndexChanged( object sender, EventArgs e )
		{
			Button button = (Button)dgAbilities.SelectedItem.FindControl( "lookupID" );
			int abilityID = Convert.ToInt32( button.CommandArgument );

			personIndex = (int)Session[ "personIndex" ];
			List<FamilyMember> children = (List<FamilyMember>)Session[ Constants.SESS_LIST_CHECKIN_FAMILYMEMBERS ];
			FamilyMember member = children[ personIndex ];
			// Save the person's ability level

			//TODO
			PersonAttribute personAttribute = new PersonAttribute( member.PersonID, AbilityLevelAttributeIDSetting );
			personAttribute.IntValue = abilityID;
			personAttribute.ModifiedBy = "check-in";
			personAttribute.DateModified = DateTime.Now;
            personAttribute.Save(CurrentOrganization.OrganizationID, CurrentUser.Identity.Name);

			// move to the next person in the list
			Session[ "personIndex" ] = ++personIndex;
			ProcessChild( personIndex );
		}

		protected void btnCancel_Click( object sender, EventArgs e )
		{

		}

		#endregion
	} // end class
} // end namespace